<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RPChess</name>
    </assembly>
    <members>
        <member name="T:RPChess.Log">
            <summary>
            A lazy man's message storage / callback.
            The Log class maintains a list of all moves made
            throughout the game. The list is static making 
            this a monostate.
            </summary>
        </member>
        <member name="M:RPChess.Log.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:RPChess.Log.#ctor(System.Boolean)">
            <summary>
            Constructor that also initializes.
            </summary>
            <param name="init">Initializes if true</param>
        </member>
        <member name="M:RPChess.Log.Finalize">
            <summary>
            Default destructor. Removes a reference. If 
            reference is less than 1 then clear _moveList.
            </summary>
        </member>
        <member name="M:RPChess.Log.initialize">
            <summary>
            Initializes the _moveList.  Emptys it if there were entrys.
            </summary>
        </member>
        <member name="M:RPChess.Log.add(System.String)">
            <summary>
            Adds a move to the Log.
            </summary>
            <param name="move">A string containing the piece moved, and the move it made.</param>
            <returns>The new Log.Count</returns>
        </member>
        <member name="M:RPChess.Log.peek">
            <summary>
            An easy method to get the last move on the log without
            instantiating a new Array.
            </summary>
            <returns>The latest string log entry.</returns>
        </member>
        <member name="M:RPChess.Log.Clear">
            <summary>
            Clears the log.
            </summary>
            <returns>Returns the number of entries cleared.</returns>
        </member>
        <member name="M:RPChess.Log.at(System.Int32)">
            <summary>
            Index access to all elements in the log.
            </summary>
            <returns>A string located at the index.</returns>
        </member>
        <member name="P:RPChess.Log.Count">
            <summary>
            The number of moves in the Log.
            </summary>
        </member>
        <member name="T:RPChess.MoveDirection">
            <summary>
            This enum matches words to cardinal directions (Forward, ForwardRight, 
            BackwardLeft, ...). This adheres to the standards of trigonometry:
            Each direction is the radian angle * 4/PI
            </summary>
        </member>
        <member name="F:RPChess.MoveDirection.Right">
            <summary>
            Right = 0
            </summary>
        </member>
        <member name="F:RPChess.MoveDirection.FowardRight">
            <summary>
            ForwardRight = 1
            </summary>
        </member>
        <member name="F:RPChess.MoveDirection.Forward">
            <summary>
            Forward = 2
            </summary>
        </member>
        <member name="F:RPChess.MoveDirection.ForwardLeft">
            <summary>
            ForwardLeft = 3
            </summary>
        </member>
        <member name="F:RPChess.MoveDirection.Left">
            <summary>
            Left = 4
            </summary>
        </member>
        <member name="F:RPChess.MoveDirection.BackwardLeft">
            <summary>
            BackwardLeft = 5
            </summary>
        </member>
        <member name="F:RPChess.MoveDirection.Backward">
            <summary>
            Backward = 6
            </summary>
        </member>
        <member name="F:RPChess.MoveDirection.BackwardRight">
            <summary>
            BackwardRight = 7
            </summary>
        </member>
        <member name="T:RPChess.MoveType">
            <summary>
            Enum for determining which type of move the class is implementing.
            </summary>
        </member>
        <member name="F:RPChess.MoveType.Capture">
            <summary>
            Capture is the standard chess move.
            </summary>
        </member>
        <member name="F:RPChess.MoveType.Movement">
            <summary>
            Movement handles a pieces movement across the board.
            </summary>
        </member>
        <member name="F:RPChess.MoveType.Attack">
            <summary>
            Attack has no movement only deals/heals damage to pieces.
            </summary>
        </member>
        <member name="T:RPChess.BoardVector">
            <summary>
            This is a struct that matches a distance and a direction
            for use on board topology.
            </summary>
        </member>
        <member name="F:RPChess.BoardVector.Direction">
            <summary>
            The direction of the vector, enum.
            </summary>
        </member>
        <member name="M:RPChess.BoardVector.toOffset">
            <summary>
            Converts the Vector to an offset stored in BoardLocation,
            uses Sin and Cos to form the X and Y offsets.
            </summary>
            <returns type="BoardLocation">
            the offset relatively equivalent to this vector</returns>
        </member>
        <member name="M:RPChess.BoardVector.fromOffset(RPChess.BoardLocation)">
            <summary>
            Creates a vector from an X,Y offset.
            </summary>
            <param name="offset" type="BoardLocation">
            The offset to convert this vector to.</param>
        </member>
        <member name="P:RPChess.BoardVector.Length">
            <summary>
            The length of the vector. It can only be positive and maxes at
            the sqrt(Int32.MaxValue) for use of pythagorean theorem.
            </summary>
        </member>
        <member name="T:RPChess.BoardLocation">
            <summary>
            This is a simple X,Y pair that is used for storing locations and
            offsets.
            </summary>
        </member>
        <member name="F:RPChess.BoardLocation.MAX_BOARD_DISTANCE">
            <summary>
            The maximum allowed distance across the board.
            </summary>
        </member>
        <member name="F:RPChess.BoardLocation.MIN_BOARD_DISTANCE">
            <summary>
            The minimum allowed distance across the board.
            </summary>
        </member>
        <member name="M:RPChess.BoardLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            An easy constructor.
            </summary>
            <param name="x">X value</param>
            <param name="y">Y value</param>
        </member>
        <member name="M:RPChess.BoardLocation.op_Addition(RPChess.BoardLocation,RPChess.BoardLocation)">
            <summary>
            Adds two BoardLocations together.
            </summary>
            <param name="b1" type="BoardLocation">
            One BoardLocation</param>
            <param name="b2" type="BoardLocation">
            A second BoardLocation.</param>
            <returns>The sum BoardLocation</returns>
        </member>
        <member name="M:RPChess.BoardLocation.Equals(System.Object)">
            <summary>
            Object value equals override
            </summary>
            <param name="obj">Another Object</param>
            <returns>
            True if the X and Y values are the same.</returns>
        </member>
        <member name="M:RPChess.BoardLocation.GetHashCode">
            <summary>
            hashcode override
            </summary>
            <returns>The hashcode of this object.</returns>
        </member>
        <member name="M:RPChess.BoardLocation.ToString">
            <summary>
            To String override for easier debugging and testing.
            </summary>
            <returns>
            A string representation of the form: ( int, int )</returns>
        </member>
        <member name="P:RPChess.BoardLocation.X">
            <summary>
            The X axis(horizontal) offset. Positive goes right.
            The maximum absolute Value is the sqrt(Int32.MaxValue).
            </summary>
        </member>
        <member name="P:RPChess.BoardLocation.Y">
            <summary>
            The Y axis(vertical) offset. Positive goes up.
            The maximum absolute Value is the sqrt(Int32.MaxValue).
            </summary>
        </member>
        <member name="T:RPChess.Model">
            <summary>
            The interface Model enforces the Board class to adhere to the
            Model-View-Controller design.
            </summary>
        </member>
        <member name="M:RPChess.Model.initialize">
            <summary>
            Take care of any initialization that the class may have.
            </summary>
        </member>
        <member name="M:RPChess.Model.toXML">
            <summary>
            Put all the data stored in this class into an XmlDocument
            for human readable/editable file storage.
            </summary>
            <returns>The data in a well formatted XML document</returns>
        </member>
        <member name="M:RPChess.Model.fromXML(System.Xml.XmlDocument)">
            <summary>
            Load all of the data to this board from a well formatted XML
            document.
            </summary>
            <param name="xml" type="XmlDocument">
            An XmlDocument that points to a xml document with the data in a
            specific format.</param>
        </member>
        <member name="P:RPChess.Model.BoardState">
            <summary>
            An array that shows what the current state of the
            Board is as far as piece placement.
            </summary>
        </member>
        <member name="T:RPChess.Board">
            <summary>
            The implementation of the Model interface.
            </summary>
        </member>
        <member name="F:RPChess.Board.Width">
            <summary>
            The width of the board.
            </summary>
        </member>
        <member name="F:RPChess.Board.Length">
            <summary>
            The length of the board.
            </summary>
        </member>
        <member name="M:RPChess.Board.#ctor(System.Int32,System.Int32)">
            <summary>
            Basic constructor.
            </summary>
            <param name="width">Width of the board.</param>
            <param name="length">Length of the board.</param>
        </member>
        <member name="M:RPChess.Board.initialize">
            <summary>
            Initialize constructor.
            </summary>
        </member>
        <member name="P:RPChess.Board.TeamWhite">
            <summary>
            The pieces on the White team.
            </summary>
        </member>
        <member name="P:RPChess.Board.TeamBlack">
            <summary>
            The pieces on the Black team.
            </summary>
        </member>
        <member name="T:RPChess.BoardSpace">
            <summary>
            An interface to hold empty board spaces and pieces.
            </summary>
        </member>
        <member name="P:RPChess.BoardSpace.isEmpty">
            <summary>
            Simple property to check if it is an empty space.
            </summary>
        </member>
        <member name="T:RPChess.Piece">
            <summary>
            A class that holds the stats and other data for a
            Game Piece that is univeral.
            </summary>
        </member>
        <member name="F:RPChess.Piece._MAX_HP">
            <summary>
            The maximum amount for the piece
            Hit Points. Pseudo constant.
            Inheritable, protected int.
            </summary>
        </member>
        <member name="F:RPChess.Piece._name">
            <summary>
            The customizable piece name, this is protected
            and inheritable string.
            </summary>
        </member>
        <member name="F:RPChess.Piece._moveSet">
            <summary>
            The internal Move set field.
            Holds a list of all the moves
            the piece can make.
            </summary>
        </member>
        <member name="M:RPChess.Piece.#ctor(System.String,System.Int32,RPChess.Move[])">
            <summary>
            Standard constructor.
            </summary>
            <param name="name">Name for piece</param>
            <param name="hp">Maximum HP</param>
            <param name="moveSet">Set of moves</param>
        </member>
        <member name="M:RPChess.Piece.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructs a piece from XML.
            </summary>
            <param name="xml">XmlDocument of piece data.</param>
        </member>
        <member name="M:RPChess.Piece.initialize">
            <summary>
            Initialize any values for the Piece.
            Resets the HP to Maximum.
            Initializes all Moves in MoveSet.
            </summary>
            <returns>
            The max hp that the current hp is reset to.</returns>
        </member>
        <member name="M:RPChess.Piece.takeDamage(System.UInt32)">
            <summary>
            Reduce the HP by the damage amount.
            </summary>
            <param name="damage">
            A positive amount to decrease this Piece's hp</param>
            <returns>
            Current HP after damage has been taken.</returns>
        </member>
        <member name="M:RPChess.Piece.healHP(System.UInt32)">
            <summary>
            Recover HP.
            </summary>
            <param name="heal">
            A positive amount to heal the piece.</param>
            <returns>Current HP after healing.</returns>
        </member>
        <member name="M:RPChess.Piece._fromXml(System.Xml.XmlDocument)">
            <summary>
            Initializes all of the Piece memembers
            according to data placed in a well formed
            Xml element.
            </summary>
            <param name="xml">An xml node containing all the member data.</param>
        </member>
        <member name="M:RPChess.Piece.toXmlDocument">
            <summary>
            Write all the piece data to a well formatted 
            XML document for human readable storage.
            </summary>
            <returns>An XmlDocument</returns>
        </member>
        <member name="P:RPChess.Piece.MAX_HP">
            <summary>
            The Maximum HP of the piece.
            </summary>
        </member>
        <member name="P:RPChess.Piece.Name">
            <summary>
            User defined name of the piece.
            </summary>
        </member>
        <member name="P:RPChess.Piece.MoveSet">
            <summary>
            A set of the piece's available moves.
            </summary>
        </member>
        <member name="P:RPChess.Piece.HP">
            <summary>
            The current HP of the piece.
            </summary>
        </member>
        <member name="P:RPChess.Piece.isEmpty">
            <summary>
            BoardSpace interface property. For a piece it is
            always false.
            </summary>
        </member>
        <member name="T:RPChess.Move">
            <summary>
            An interface for the different actions a Piece can do.
            </summary>
        </member>
        <member name="M:RPChess.Move.initialize">
            <summary>
            This initializes any dynamic variables.</summary>
        </member>
        <member name="M:RPChess.Move.toXML">
            <summary>
            Exports the properites of the Move.</summary>
            <returns>A DTD complient XML fragment.</returns>
        </member>
        <member name="M:RPChess.Move.fromXML(System.Xml.XmlDocument)">
            <summary>
            Loads the properties of the Move from the XML.</summary>
            <param name="xml" type="XmlDocument">The XML with Move
            information.</param>
        </member>
        <member name="P:RPChess.Move.Type">
            <summary>
            Type property </summary>
            <value>
            The type of move this object is an instance of.</value>
        </member>
        <member name="T:RPChess.Attack">
            <summary>
            A base class for attacks.
            <Implements>Move</Implements>
            </summary>
        </member>
        <member name="F:RPChess.Attack._name">
            <summary>
            The name of the attack, user customizable.
            Inheritable, protected, String.
            </summary>
        </member>
        <member name="F:RPChess.Attack._MAX_POINTS">
            <summary>
            The internal storage of MAX_POINTS.
            Inheritable, protected, int.
            </summary>
        </member>
        <member name="F:RPChess.Attack._points">
            <summary>
            Internal representation for Points.
            Inheritable, protected, int.
            </summary>
        </member>
        <member name="M:RPChess.Attack.use">
            <summary>
            Use the ability, decreases the Ability's points by 1.
            </summary>
            <returns>Returns the remaining points.</returns>
        </member>
        <member name="M:RPChess.Attack.reset">
            <summary>
            Resets the points to MAX_POINTS.
            </summary>
            <returns>Returns the remaining points.</returns>
        </member>
        <member name="M:RPChess.Attack.initialize">
            <summary>
            Resets member data to zero state, usually 
            brings Point back to MAX_POINTS, etc.
            </summary>
        </member>
        <member name="M:RPChess.Attack.toXML">
            <summary>
            Formats member data into an XML document.
            Required by all inheriting Classes. Allows for a simple
            and loopable Constructor method.  Also eases loading/saving
            from file.
            </summary>
            <returns>
            An xml document containing all of the member data of an attack.
            </returns>
        </member>
        <member name="M:RPChess.Attack.fromXML(System.Xml.XmlDocument)">
            <summary>
            Loads member data from an xml document.
            Required by all inheriting Classes. Allows for a simple
            and loopable Constructor method.  Also eases loading/saving
            from file.
            </summary>
            <param name="xml">
            An xml document containing all of the member data of an attack.
            </param>
        </member>
        <member name="P:RPChess.Attack.Name">
            <summary>
            The Name of the attack for aesthetic purposes.
            </summary>
        </member>
        <member name="P:RPChess.Attack.MAX_POINTS">
            <summary>
            The Maximum amount of points/uses this attack
            will be initialized to.
            </summary>
        </member>
        <member name="P:RPChess.Attack.Points">
            <summary>
            The current amount of points/uses that
            the Attack has left.
            </summary>
        </member>
        <member name="P:RPChess.Attack.Type">
            <summary>
            Identifies this as a Move of type Attack.
            </summary>
        </member>
        <member name="T:RPChess.AreaOfEffectAbility">
            <summary>
            An area of effect attack for wide spread multispace attacks.
            <Implements>Move</Implements>
            <Implements>Attack</Implements>
            </summary>
        </member>
        <member name="M:RPChess.AreaOfEffectAbility.#ctor(System.String,System.Int32,System.Int32[][])">
            <summary>
            Constructs an AreaOfEffectAbility given all the necessary memember data.
            </summary>
            <param name="name">Aesthetic identifier.</param>
            <param name="points">
            How many times the ability may be used.
            </param>
            <param name="areaOfEffect">
            An array of integers expressing the size and shape of the ability.
            </param>
        </member>
        <member name="M:RPChess.AreaOfEffectAbility.initialize">
            <summary>
            Resets memeber data to un-used state, affects points.
            </summary>
        </member>
        <member name="M:RPChess.AreaOfEffectAbility.toXML">
            <summary>
            Useful for saving data to file.
            </summary>
            <returns>
            An xml document containing AreaOfEffectAbility memeber data.
            </returns>
        </member>
        <member name="M:RPChess.AreaOfEffectAbility.fromXML(System.Xml.XmlDocument)">
            <summary>
            Loads the AreaOfEffectAbility from an XML document
            </summary>
            <param name="xml">
            An XML document containing AreaOfEffectAbility member data.
            </param>
        </member>
        <member name="P:RPChess.AreaOfEffectAbility.AreaOfEffect">
            <summary>
            An array of integers expressing the size and shape of the ability.
            </summary>
        </member>
        <member name="T:RPChess.DirectionalAbility">
            <summary>
            Directional attack for ranged attacks.
            <Implements>Move</Implements>
            <Implements>Attack</Implements>
            </summary>
        </member>
        <member name="M:RPChess.DirectionalAbility.#ctor(System.String,System.Int32,RPChess.BoardVector,System.Int32)">
            <summary>
            Constructs a DirectionalAbility given all of the 
            necessary memeber data.
            </summary>
            <param name="name"></param>
            <param name="points"></param>
            <param name="boardVector"></param>
            <param name="damage"></param>
        </member>
        <member name="M:RPChess.DirectionalAbility.initialize">
            <summary>
            Re-initializes the DirectionalAbility to a fresh
            un-used state.
            </summary>
        </member>
        <member name="M:RPChess.DirectionalAbility.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructs a DirectionalAbility from an xml document.
            </summary>
            <param name="xml">
            An XmlDocument containing DirectionAbility member data.
            </param>
        </member>
        <member name="M:RPChess.DirectionalAbility.toXML">
            <summary>
            Calls toXMLString() inorder to form a more perfect Union.
            </summary>
            <returns>
            An XmlDocument containing DirectionAbility member data.
            </returns>
        </member>
        <member name="M:RPChess.DirectionalAbility.fromXML(System.Xml.XmlDocument)">
            <summary>
            Loads the member data from an xml document.
            </summary>
            <param name="xml">
            Xml document containing correctly formatted Directional Ability
             member data.
            </param>
        </member>
        <member name="M:RPChess.DirectionalAbility.toXMLString">
            <summary>
            Forms an Xml Snippet representing this attack.
            </summary>
            <returns>String that uses xml syntax.</returns>
        </member>
        <member name="P:RPChess.DirectionalAbility.BoardVector">
            <summary>
            The Direction in which the Ability acts.
            </summary>
        </member>
        <member name="P:RPChess.DirectionalAbility.Damage">
            <summary>
            The amount of damage this Ability gives to the target.
            </summary>
        </member>
        <member name="T:RPChess.Movement">
            <summary>
            The movement class handles topological calculations.</summary>
            <remarks>
            A movement is a type of move that allows the Piece to
            move from one space to another on the board.
            </remarks>
        </member>
        <member name="F:RPChess.Movement._offset">
            <summary>
            This is the inheritable offset (BoardLocation type) that holds an
            X, Y offset pair.
            </summary>
        </member>
        <member name="F:RPChess.Movement._jump">
            <summary>
            This determines whether other pieces may block this 
            piece's movement. It is an inheritable boolean.
            </summary>
        </member>
        <member name="M:RPChess.Movement.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Deprecated Constructor.
            </summary>
            <param name="right">The right offset.</param>
            <param name="forward">The forward offset.</param>
            <param name="jump">
            False if this piece may be blocked by other pieces.
            </param>
        </member>
        <member name="M:RPChess.Movement.#ctor(RPChess.BoardLocation)">
            <summary>
            Standard Movement Constructor from a BoardLocation format offset.
            Defaults to Jump = False.
            </summary>
            <param name="offset">The X, Y offsets of the move.</param>
        </member>
        <member name="M:RPChess.Movement.#ctor(RPChess.BoardLocation,System.Boolean)">
            <summary>
            Construct a Movement using a BoardLocation offset
            and a jump.
            </summary>
            <param name="offset">The X,Y offsets of the move.</param>
            <param name="jump">
            Whether this peice can be blocked by other peices.
            </param>
        </member>
        <member name="M:RPChess.Movement.#ctor(System.Xml.XmlDocument)">
            <summary>
            Construct a Movement from xml data.
            </summary>
            <param name="xml">Well formed xml document.</param>
        </member>
        <member name="M:RPChess.Movement.moveFrom(RPChess.BoardLocation)">
            <summary>
            A simple move operation, given a start point.
            </summary>
            <param name="bLoc">The starting point of the travel.</param>
            <returns>
            A new BoardLocation that is offset from bLoc
            </returns>
        </member>
        <member name="M:RPChess.Movement.moveFrom(RPChess.BoardLocation,System.Int32)">
            <summary>
            A basic move operation, given a start point and
            distance to travel.
            </summary>
            <param name="bLoc">The starting point of the travel.</param>
            <param name="distance">The number of blocks to move.</param>
            <returns>
            A new BoardLocation that is offset a distance from bLoc
            </returns>
        </member>
        <member name="M:RPChess.Movement.initialize">
            <summary>
            Does absolutely nothing.
            </summary>
        </member>
        <member name="M:RPChess.Movement.toXML">
            <summary>
            Forms an XmlNode of a well formed xml representation
            of the Movement memeber data.
            </summary>
            <returns>Well formed Xml Document.</returns>
        </member>
        <member name="M:RPChess.Movement.fromXML(System.Xml.XmlDocument)">
            <summary>
            Initializes movement from Xml Element.
            </summary>
            <param name="xml">
            Xml element containing Movement data.
            </param>
        </member>
        <member name="M:RPChess.Movement.ToString">
            <summary>
            Overrides ToString, returns a String of the form:
            "RPChess.Movement( X, Y )"
            </summary>
            <returns>String representation of memember data</returns>
        </member>
        <member name="M:RPChess.Movement.Equals(System.Object)">
            <summary>
            Compares the object's members.
            </summary>
            <param name="obj">Another object.</param>
            <returns>True if objects have same members.</returns>
        </member>
        <member name="M:RPChess.Movement.GetHashCode">
            <summary>
            Gets rid of a warning, returns the base object
            GetHashCode()
            </summary>
            <returns>base.GetHashCode()</returns>
        </member>
        <member name="P:RPChess.Movement.Offset">
            <summary>
            The Offset of the Movement. It holds how far a piece may travel
            using this Move.
            </summary>
        </member>
        <member name="P:RPChess.Movement.Jump">
            <summary>
            The accessor for the Jump (bool) attribute.
            </summary>
        </member>
        <member name="P:RPChess.Movement.Type">
            <summary>
            Returns what type of Move, in this case Movement.
            </summary>
        </member>
    </members>
</doc>
